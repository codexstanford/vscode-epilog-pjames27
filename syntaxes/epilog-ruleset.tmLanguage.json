{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.epilog-ruleset",
	"name": "Epilog Ruleset",
	"patterns": [
		{"include": "#ruleset"}
	],
	"repository": {

		"ruleset": {
			"name": "ruleset.epilog",
			"patterns": [
				{"include": "#frontmatter"},
				{"include": "#comment"},
				{"include": "#punctuation-ampersand"},
				{"include": "#rule-def"},
				{"include": "#rule-literal"}
			]
		},

		"ground-atom": {
			"name": "ground-atom.epilog",
			"patterns": [
				{"include": "#boolean-atom"},
				{"include": "#standard-atom-ground"}
		]
		},

		"standard-atom-ground" : {
			"name": "entity.name.function.standard-atom-ground",
			"begin": "(([a-z0-9.][a-z0-9_.]*)|(\"([^\"]|\\\\.)*\"))\\(\\s*",
			"end": "(\\s*\\)\\s*)([%].*)?\n",
			"patterns": [
				{"include": "#epilog-ground-term"},
				{"include": "#punctuation-comma"}
			],
			"endCaptures": {
				"2": {"name": "comment.line.percentage"}
			}
		},
		
		"boolean-atom" : {
			"name": "entity.name.function.boolean-atom",
			"match": "(([a-z0-9.][a-z0-9_.]*)|(\".*\"))\\s*([%].*)?\n",
			"captures": { 
				"4": { "name" : "comment.line.percentage"}
			}
		},
		
		"epilog-ground-term": {
			"name": "ground-term.epilog",
			"patterns": [
				{"include": "#epilog-ground-compound-term"},
				{"include": "#epilog-constant"}
		]
		},

		"epilog-constant" : {
			"name": "constant.language.epilog",
			"patterns": [
				{"include": "#strings"},
				{
					"name": "constant.numeric.epilog",
					"match": "(?!(([.][0-9]+[a-z._])|([0-9]+[a-z_])|([0-9]+[.][0-9]*[a-z._])))(([0-9]+[.]?[0-9]*)|([.][0-9]+))"
				},
				{
					"name": "variable.other.constant.epilog",
					"match": "[a-z0-9.][a-z0-9_.]*"
				}
			]
		},

		"epilog-ground-compound-term": {
			"name": "epilog.ground-compound-term",
			"begin": "(([a-z0-9.][a-z0-9_.]*)|(\"([^\"]|\\\\.)*\"))\\(\\s*",
			"end": "\\s*\\)",
			"beginCaptures": {
				"1": {"name" : "entity.name.type.compoundterm"}
			},
			"patterns": [
				{"include": "#epilog-ground-term"},
				{"include": "#punctuation-comma"}
			]
		},

		"atom": {
			"name": "atom.epilog",
			"patterns": [
				{"include": "#boolean-atom"},
				{"include": "#standard-atom"}
		]
		},

		"standard-atom" : {
			"name": "entity.name.function.standard-atom",
			"begin": "(([a-z0-9.][a-z0-9_.]*)|(\"([^\"]|\\\\.)*\"))\\(\\s*",
			"end": "\\s*\\)\\s*\n",
			"patterns": [
				{"include": "#epilog-term"},
				{"include": "#punctuation-comma"}
			]
		},


		"epilog-term" : {
			"name": "term.epilog",
			"patterns": [
				{"include": "#epilog-compound-term"},
				{"include": "#epilog-constant"},
				{"include": "#epilog-var"}
		]
		},

		"epilog-compound-term": {
			"name": "epilog.compound-term",
			"begin": "(([a-z0-9.][a-z0-9_.]*)|(\"([^\"]|\\\\.)*\"))\\(\\s*",
			"end": "\\s*\\)",
			"beginCaptures": {
				"1": {"name" : "entity.name.type.compoundterm"}
			},
			"patterns": [
				{"include": "#epilog-term"},
				{"include": "#punctuation-comma"}
			]
		},

		"epilog-var" : {
			"name": "variable.object.epilog",
			"match": "(\\b_\\b)|([A-Z][A-Za-z0-9_]*)"
		},
		
		"strings": {
			"name": "string.quoted.double.epilog",
			"begin": "\"",
			"end": "\"",
			"contentName": "string.quoted.double.content",
			"patterns": [
				{
					"name": "constant.character.escape.epilog",
					"match": "\\\\."
				}
			]
		},

		"rule-def": {
			"name": "rule.def-separator.epilog",
			"match": ":-"
		},

		"rule-literal": {
			"name": "rule.literal.epilog",
			"begin": "[~]?(([a-z0-9.][a-z0-9_.]*)|(\"([^\"]|\\\\.)*\"))\\(\\s*",
			"end": "\\s*\\)\\s*",
			"patterns": [
				{"include": "#epilog-term"},
				{"include": "#punctuation-comma"}
			]
		},

		"punctuation-comma": {
			"name": "punctuation.separator.comma.epilog",
			"match": ","
		},

		"punctuation-ampersand": {
			"name": "punctuation.separator.ampersand.epilog",
			"match": "&"
		},

		"comment": {
			"name": "comment.line.percentage",
			"match": "[%].*\n"
		},

		"frontmatter": {
			"name": "comment.block.frontmatter.epilog",
			"begin": "^---",
			"end": "^---",
			"patterns": [
				{
					"name": "frontmatter.key",
					"match": "[a-zA-Z0-9_.]+\\s*:\\s*",
					"captures": {
						"1": { "name": "frontmatter.key" }
					}
				},
				{
					"name": "frontmatter.value",
					"match": "[^\\s].*",
					"captures": {
						"1": { "name": "frontmatter.value" }
					}
				}
			]
		}

		
	}
}